SHELL=/bin/bash
PROJECT_NAME := "cluster-manager"
AGENT_IMAGE_NAME ?= "containership/cloud-agent"
AGENT_IMAGE_TAG ?= "latest"
COORDINATOR_IMAGE_NAME ?= "containership/cloud-coordinator"
COORDINATOR_IMAGE_TAG ?= "latest"
TEST_IMAGE_NAME ?= "containership/$(PROJECT_NAME)-test"
PKG := "github.com/containership/$(PROJECT_NAME)"
PKG_LIST := $(shell glide novendor)
GO_FILES := $(shell find . -type f -not -path './vendor/*' -name '*.go')

# TODO generated fakes can get a vet error for a copied lock
VET_LIST := $(shell go list ./... | grep -v '/pkg/client/clientset/versioned/fake')

.PHONY: all
all: agent coordinator ## (default) Build and deploy agent and coordinator

.PHONY: help
help: ## Display this help screen
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: fmt-check
fmt-check: ## Check the file format
	@gofmt -s -e -d ${GO_FILES}

.PHONY: lint
lint: ## Lint the files
	@golint -set_exit_status ${PKG_LIST}

.PHONY: vet
vet: ## Vet the files
	@go vet ${VET_LIST}

.PHONY: test
test: ## Run unit tests
	@go test -short ${PKG_LIST}

.PHONY: coverage
coverage: ## Run unit tests with coverage checking / codecov integration
	@go test -short -coverprofile=coverage.txt -covermode=count ${PKG_LIST}

## Read about data race https://golang.org/doc/articles/race_detector.html
## to not test file for race use `// +build !race` at top
.PHONY: race
race: ## Run data race detector
	@go test -race -short ${PKG_LIST}

.PHONY: msan
msan: ## Run memory sanitizer (only works on linux/amd64)
	@go test -msan -short ${PKG_LIST}

.PHONY: gen
gen: ## Generate autogenerated files
	@./hack/update-codegen.sh

.PHONY: verify
verify: ## Verify autogenerated files
	@./hack/verify-codegen.sh

### Commands for local development
.PHONY: deploy-crds
deploy-crds: ## Deploy all CRDs
	kubectl apply -f deploy/crd

.PHONY: undeploy-crds
undeploy-crds: ## Delete all CRDs
	# Leading dash on undeploy targets are for ignoring errors
	-kubectl delete --now -f deploy/crd

.PHONY: deploy-common
deploy-common: deploy-crds ## Deploy all common yamls
	#  Namespace must come first
	kubectl apply -f deploy/common/containership-core-namespace.yaml
	kubectl apply -f deploy/rbac
	kubectl apply -f deploy/common
	kubectl apply -f deploy/eventrouter

.PHONY: undeploy-common
undeploy-common: undeploy-crds ## Delete all common yamls
	# Don't care about order for deletes
	-kubectl delete --now -f deploy/common
	-kubectl delete --now -f deploy/rbac
	-kubectl delete --now -f deploy/eventrouter

.PHONY: deploy-agent
deploy-agent: deploy-common ## Deploy the agent
	kubectl apply -f deploy/development/agent.yaml

.PHONY: undeploy-agent
undeploy-agent: ## Delete the agent
	-kubectl delete --now -f deploy/development/agent.yaml

.PHONY: deploy-coordinator
deploy-coordinator: deploy-common ## Deploy the coordinator
	kubectl apply -f deploy/development/coordinator.yaml

.PHONY: undeploy-coordinator
undeploy-coordinator: ## Delete the coordinator
	-kubectl delete --now -f deploy/development/coordinator.yaml

.PHONY: deploy
deploy: deploy-agent deploy-coordinator # Deploy everything

.PHONY: undeploy
undeploy: undeploy-agent undeploy-coordinator undeploy-common ## Delete everything from Kubernetes

# Perform a multistage build of agent or coordinator. The intermediate
# builder image is tagged to allow it to be pushed/pulled and used as cache
# for CI.
define multistage_build
	docker image build -t $(1):builder \
		--target builder \
		--cache-from $(AGENT_IMAGE_NAME):builder \
		--cache-from $(COORDINATOR_IMAGE_NAME):builder \
		--build-arg GIT_DESCRIBE=`git describe --dirty` \
		--build-arg GIT_COMMIT=`git rev-parse --short HEAD` \
		-f $(2) . \
	&& \
	docker image build -t $(1):$(AGENT_IMAGE_TAG) \
		--target runner \
		--cache-from $(AGENT_IMAGE_NAME):builder \
		--cache-from $(AGENT_IMAGE_NAME):latest \
		--cache-from $(COORDINATOR_IMAGE_NAME):builder \
		--cache-from $(COORDINATOR_IMAGE_NAME):latest \
		--build-arg GIT_DESCRIBE=`git describe --dirty` \
		--build-arg GIT_COMMIT=`git rev-parse --short HEAD` \
		-f $(2) .
endef

.PHONY: build-agent
build-agent: ## Build the agent in Docker
	$(call multistage_build,$(AGENT_IMAGE_NAME),Dockerfile.agent)

.PHONY: agent
agent: build-agent deploy-agent ## Build and deploy the agent

.PHONY: build-coordinator
build-coordinator: ## Build the coordinator in Docker
	$(call multistage_build,$(COORDINATOR_IMAGE_NAME),Dockerfile.coordinator)

.PHONY: coordinator
coordinator: build-coordinator deploy-coordinator ## Build and deploy the coordinator

.PHONY: build-test
build-test: ## Build image for running tests in CI
	@docker image build -t $(TEST_IMAGE_NAME) \
		--cache-from $(AGENT_IMAGE_NAME):builder \
		--cache-from $(COORDINATOR_IMAGE_NAME):builder \
		-f Dockerfile.test .

.PHONY: release
release: ## Build release images for agent and coordinator (must be on semver tag)
	@./hack/build-release.sh
