/*
Copyright 2019 Containership

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v3

import (
	v3 "github.com/containership/cluster-manager/pkg/apis/provision.containership.io/v3"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterUpgradeLister helps list ClusterUpgrades.
type ClusterUpgradeLister interface {
	// List lists all ClusterUpgrades in the indexer.
	List(selector labels.Selector) (ret []*v3.ClusterUpgrade, err error)
	// ClusterUpgrades returns an object that can list and get ClusterUpgrades.
	ClusterUpgrades(namespace string) ClusterUpgradeNamespaceLister
	ClusterUpgradeListerExpansion
}

// clusterUpgradeLister implements the ClusterUpgradeLister interface.
type clusterUpgradeLister struct {
	indexer cache.Indexer
}

// NewClusterUpgradeLister returns a new ClusterUpgradeLister.
func NewClusterUpgradeLister(indexer cache.Indexer) ClusterUpgradeLister {
	return &clusterUpgradeLister{indexer: indexer}
}

// List lists all ClusterUpgrades in the indexer.
func (s *clusterUpgradeLister) List(selector labels.Selector) (ret []*v3.ClusterUpgrade, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.ClusterUpgrade))
	})
	return ret, err
}

// ClusterUpgrades returns an object that can list and get ClusterUpgrades.
func (s *clusterUpgradeLister) ClusterUpgrades(namespace string) ClusterUpgradeNamespaceLister {
	return clusterUpgradeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterUpgradeNamespaceLister helps list and get ClusterUpgrades.
type ClusterUpgradeNamespaceLister interface {
	// List lists all ClusterUpgrades in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v3.ClusterUpgrade, err error)
	// Get retrieves the ClusterUpgrade from the indexer for a given namespace and name.
	Get(name string) (*v3.ClusterUpgrade, error)
	ClusterUpgradeNamespaceListerExpansion
}

// clusterUpgradeNamespaceLister implements the ClusterUpgradeNamespaceLister
// interface.
type clusterUpgradeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterUpgrades in the indexer for a given namespace.
func (s clusterUpgradeNamespaceLister) List(selector labels.Selector) (ret []*v3.ClusterUpgrade, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.ClusterUpgrade))
	})
	return ret, err
}

// Get retrieves the ClusterUpgrade from the indexer for a given namespace and name.
func (s clusterUpgradeNamespaceLister) Get(name string) (*v3.ClusterUpgrade, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v3.Resource("clusterupgrade"), name)
	}
	return obj.(*v3.ClusterUpgrade), nil
}
