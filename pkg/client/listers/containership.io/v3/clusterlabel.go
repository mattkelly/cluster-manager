/*
Copyright 2019 Containership

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v3

import (
	v3 "github.com/containership/cluster-manager/pkg/apis/containership.io/v3"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterLabelLister helps list ClusterLabels.
type ClusterLabelLister interface {
	// List lists all ClusterLabels in the indexer.
	List(selector labels.Selector) (ret []*v3.ClusterLabel, err error)
	// ClusterLabels returns an object that can list and get ClusterLabels.
	ClusterLabels(namespace string) ClusterLabelNamespaceLister
	ClusterLabelListerExpansion
}

// clusterLabelLister implements the ClusterLabelLister interface.
type clusterLabelLister struct {
	indexer cache.Indexer
}

// NewClusterLabelLister returns a new ClusterLabelLister.
func NewClusterLabelLister(indexer cache.Indexer) ClusterLabelLister {
	return &clusterLabelLister{indexer: indexer}
}

// List lists all ClusterLabels in the indexer.
func (s *clusterLabelLister) List(selector labels.Selector) (ret []*v3.ClusterLabel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.ClusterLabel))
	})
	return ret, err
}

// ClusterLabels returns an object that can list and get ClusterLabels.
func (s *clusterLabelLister) ClusterLabels(namespace string) ClusterLabelNamespaceLister {
	return clusterLabelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterLabelNamespaceLister helps list and get ClusterLabels.
type ClusterLabelNamespaceLister interface {
	// List lists all ClusterLabels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v3.ClusterLabel, err error)
	// Get retrieves the ClusterLabel from the indexer for a given namespace and name.
	Get(name string) (*v3.ClusterLabel, error)
	ClusterLabelNamespaceListerExpansion
}

// clusterLabelNamespaceLister implements the ClusterLabelNamespaceLister
// interface.
type clusterLabelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterLabels in the indexer for a given namespace.
func (s clusterLabelNamespaceLister) List(selector labels.Selector) (ret []*v3.ClusterLabel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.ClusterLabel))
	})
	return ret, err
}

// Get retrieves the ClusterLabel from the indexer for a given namespace and name.
func (s clusterLabelNamespaceLister) Get(name string) (*v3.ClusterLabel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v3.Resource("clusterlabel"), name)
	}
	return obj.(*v3.ClusterLabel), nil
}
