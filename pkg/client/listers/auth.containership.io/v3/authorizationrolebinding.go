/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v3

import (
	v3 "github.com/containership/cluster-manager/pkg/apis/auth.containership.io/v3"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuthorizationRoleBindingLister helps list AuthorizationRoleBindings.
type AuthorizationRoleBindingLister interface {
	// List lists all AuthorizationRoleBindings in the indexer.
	List(selector labels.Selector) (ret []*v3.AuthorizationRoleBinding, err error)
	// AuthorizationRoleBindings returns an object that can list and get AuthorizationRoleBindings.
	AuthorizationRoleBindings(namespace string) AuthorizationRoleBindingNamespaceLister
	AuthorizationRoleBindingListerExpansion
}

// authorizationRoleBindingLister implements the AuthorizationRoleBindingLister interface.
type authorizationRoleBindingLister struct {
	indexer cache.Indexer
}

// NewAuthorizationRoleBindingLister returns a new AuthorizationRoleBindingLister.
func NewAuthorizationRoleBindingLister(indexer cache.Indexer) AuthorizationRoleBindingLister {
	return &authorizationRoleBindingLister{indexer: indexer}
}

// List lists all AuthorizationRoleBindings in the indexer.
func (s *authorizationRoleBindingLister) List(selector labels.Selector) (ret []*v3.AuthorizationRoleBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.AuthorizationRoleBinding))
	})
	return ret, err
}

// AuthorizationRoleBindings returns an object that can list and get AuthorizationRoleBindings.
func (s *authorizationRoleBindingLister) AuthorizationRoleBindings(namespace string) AuthorizationRoleBindingNamespaceLister {
	return authorizationRoleBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuthorizationRoleBindingNamespaceLister helps list and get AuthorizationRoleBindings.
type AuthorizationRoleBindingNamespaceLister interface {
	// List lists all AuthorizationRoleBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v3.AuthorizationRoleBinding, err error)
	// Get retrieves the AuthorizationRoleBinding from the indexer for a given namespace and name.
	Get(name string) (*v3.AuthorizationRoleBinding, error)
	AuthorizationRoleBindingNamespaceListerExpansion
}

// authorizationRoleBindingNamespaceLister implements the AuthorizationRoleBindingNamespaceLister
// interface.
type authorizationRoleBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuthorizationRoleBindings in the indexer for a given namespace.
func (s authorizationRoleBindingNamespaceLister) List(selector labels.Selector) (ret []*v3.AuthorizationRoleBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.AuthorizationRoleBinding))
	})
	return ret, err
}

// Get retrieves the AuthorizationRoleBinding from the indexer for a given namespace and name.
func (s authorizationRoleBindingNamespaceLister) Get(name string) (*v3.AuthorizationRoleBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v3.Resource("authorizationrolebinding"), name)
	}
	return obj.(*v3.AuthorizationRoleBinding), nil
}
