/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v3

import (
	v3 "github.com/containership/cluster-manager/pkg/apis/auth.containership.io/v3"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuthorizationRoleLister helps list AuthorizationRoles.
type AuthorizationRoleLister interface {
	// List lists all AuthorizationRoles in the indexer.
	List(selector labels.Selector) (ret []*v3.AuthorizationRole, err error)
	// AuthorizationRoles returns an object that can list and get AuthorizationRoles.
	AuthorizationRoles(namespace string) AuthorizationRoleNamespaceLister
	AuthorizationRoleListerExpansion
}

// authorizationRoleLister implements the AuthorizationRoleLister interface.
type authorizationRoleLister struct {
	indexer cache.Indexer
}

// NewAuthorizationRoleLister returns a new AuthorizationRoleLister.
func NewAuthorizationRoleLister(indexer cache.Indexer) AuthorizationRoleLister {
	return &authorizationRoleLister{indexer: indexer}
}

// List lists all AuthorizationRoles in the indexer.
func (s *authorizationRoleLister) List(selector labels.Selector) (ret []*v3.AuthorizationRole, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.AuthorizationRole))
	})
	return ret, err
}

// AuthorizationRoles returns an object that can list and get AuthorizationRoles.
func (s *authorizationRoleLister) AuthorizationRoles(namespace string) AuthorizationRoleNamespaceLister {
	return authorizationRoleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuthorizationRoleNamespaceLister helps list and get AuthorizationRoles.
type AuthorizationRoleNamespaceLister interface {
	// List lists all AuthorizationRoles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v3.AuthorizationRole, err error)
	// Get retrieves the AuthorizationRole from the indexer for a given namespace and name.
	Get(name string) (*v3.AuthorizationRole, error)
	AuthorizationRoleNamespaceListerExpansion
}

// authorizationRoleNamespaceLister implements the AuthorizationRoleNamespaceLister
// interface.
type authorizationRoleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuthorizationRoles in the indexer for a given namespace.
func (s authorizationRoleNamespaceLister) List(selector labels.Selector) (ret []*v3.AuthorizationRole, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.AuthorizationRole))
	})
	return ret, err
}

// Get retrieves the AuthorizationRole from the indexer for a given namespace and name.
func (s authorizationRoleNamespaceLister) Get(name string) (*v3.AuthorizationRole, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v3.Resource("authorizationrole"), name)
	}
	return obj.(*v3.AuthorizationRole), nil
}
